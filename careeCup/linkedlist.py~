#!/usr/bin/python -tt

class Node(object):

  def __init__(self, data=None, next_node=None):
    self.data = data
    self.next_node = next_node

  def get_data(self):
    return self.data

  def get_next(self):
    return self.next_node

  def set_next(self, new_next):
    self.next_node = new_next

  def __str__(self):
    return self.get_data()

class LinkedList(object):

  def __init__(self, head=None):
    self.head = head

  def insert(self, data):
    new_node = Node(data)
    new_node.set_next(self.head)
    # new_node = Node(data, self.head)
    self.head = new_node

  def size(self):
    currnet = self.head
    count = 0
    while current:
      count += 1
      current = current.get_next()
    return count

  def search(self, data):
    current = self.head
    found = False
    while current and found is False:
      if current.get_data() == data:
        found = True
      else:
        current = current.get_next()
    if current is None:
      raise ValueError('Data not in list')
    return current

  def delete(self, data):
    current = self.head
    previous = None
    found = False
    while current and found is False:
      if current.get_data() == data:
        found = True
      else:
        previous = current
        current = current.get_next()
    if current is None:
      raise ValueError('Data not in list')
    if previous is None:
      self.head = current.get_next()
    else:
      previous.set_next(current.get_next())

  def remove_duplicates(self):
    current = self.head
    while current:
      previous = current
      next = current.get_next()
      while next:
        if current.get_data() == next.get_data():
          previous.set_next(next.get_next())
        else:
          previous = next
        next = next.get_next()
      current = current.get_next()

  def find_nth_to_last(self,n):
    l_len = 0
    b_l_list = LinkedList()
    n_plus_1th = self.head
    current = self.head
    while current:
      b_l_list.insert(current.get_data())
      l_len = l_len + 1
      if l_len > n:
        b_l_list.delete(n_plus_1th.get_data())
        n_plus_1th = n_plus_1th.get_next()
      current = current.get_next()
    #print b_l_list
    if l_len >= n:
      current = b_l_list.head
      while current.get_next():
        current = current.get_next()
      return current
    else:
      raise ValueError('Linked list does not contatin %d elements', n)

  def corrupt_loop(self):
    nodes = []
    current = self.head
    while current:
      if current.get_next() in nodes:
        return current.get_next()
      else:
        nodes.append(current)
        current = current.get_next()
    return None

  def __str__(self):
    current = self.head
    if current == None:
      return 'empty linked list'
    lst = []
    while current:
      lst.append(current.get_data())
      lst.append(' -> ')
      current = current.get_next()
    lst.pop(len(lst)-1)
    return ''.join(lst)
